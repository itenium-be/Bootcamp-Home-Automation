esphome:
  name: huisje1
  friendly_name: Huisje1

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "WLjG7FBFSudeIk7id20B3jQAyfkVb0Jmc+qxqtHw434="

ota:
  - platform: esphome
    password: "ca4a6b4bafa2d947aa8996746937e9c4"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip: 
    static_ip: 192.168.0.123
    gateway: 192.168.0.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Huisje1 Fallback Hotspot"
    password: "r1rQQP0Ham3P"

captive_portal:

web_server:
  port: 80

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO34
      inverted: false
    name: "Steam"  

  - platform: gpio
    pin:
      number: GPIO14
      inverted: false
    name: "Motion Sensor"
    device_class: motion

  - platform: gpio
    pin:
      number: GPIO16
      mode: INPUT_PULLUP
      inverted: true
    name: "Left Button"

  - platform: gpio
    pin:
      number: GPIO27
      mode: INPUT_PULLUP
      inverted: true
    name: "Right Button"

light:
  - platform: monochromatic
    name: "LED"
    output: led 

  - platform: neopixelbus
    name: "neopixel light"
    variant: SK6812
    type: GRB
    pin: GPIO26
    num_leds: 4
    effects:
      - addressable_random_twinkle:
          name: Random Twinkle Effect With Custom Values
          twinkle_probability: 25%
          progress_interval: 32ms
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 200

sensor:
  - platform: dht
    pin: GPIO17
    model: DHT11
    humidity:
      name: "Roof Humidity"
    temperature:
      name: "Roof Temperature"
    update_interval: 10s

#i2c:
#  sda: GPIO21
#  scl: GPIO22
#  scan: false

#rc522_i2c:
#  address: 0x28
#  update_interval: 1s

#display:
#  - platform: lcd_pcf8574
#    dimensions: 16x2
#    address: 0x27
#    update_interval: 1s
#    lambda: |-
#      it.print(0, 0, "Hello World!"); // First row
#      it.print(0, 1, "ESPHome LCD!"); // Second row

servo:
  - id: window_servo
    output: window_output

  - id: doors_servo
    output: doors_output

rtttl:
  output: rtttl_out
  id: buzzer_rtttl

output:
  - platform: ledc
    id: window_output
    pin: GPIO05
    frequency: 50 Hz

  - platform: ledc
    id: doors_output
    pin: GPIO13
    frequency: 50 Hz

  - platform: ledc
    id: led
    pin: GPIO12

  - platform: ledc
    pin: GPIO25
    id: rtttl_out

number:
  - platform: template
    name: window servo
    min_value: -10
    initial_value: 0
    max_value: 10
    step: 1
    optimistic: true
    on_value:
    - servo.write:
        id: window_servo
        level: !lambda 'return x / 1000.0;'

  - platform: template
    name: doors servo
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1
    optimistic: true
    on_value:
    - servo.write:
        id: doors_servo
        level: !lambda 'return x / 100.0;'